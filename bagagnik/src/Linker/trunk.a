;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 30.03.2014
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#include <stdio.h>
;
;
;//параметри сенсора
;//#define MIN_PER_SENS 18
;//#define MAX_PER_SENS 98
;#define ACCURACY_PER 5.0
;
;eeprom unsigned int min_sensor_value = 0;
;eeprom unsigned int max_sensor_value = 0;
;
;
;/*
;PINC0 - вхід від резистора
;PINC4 - кнопка закриття
;PINC5 - з центрального замка
;PORTD5 - Закриття багажника, мотор
;PORTD6 - Відкриття багажника, мотор
;PORTD7 - електро-муфта
;*/
;
;#define CLOSE_BUTTON PINC.4    // off=0, on=1
;#define CENTRAL_BUTTON PINC.5  // off=1, on=0
;#define PROG_BUTTON PINC.1     // off=1, on=0
;
;//кінцевик
;#define END_BUTTON PINB.0     // open=1, close=0
;
;#define ELECT_COUPLING      PORTD.7
;
;#define MOTOR_FORWARD       PORTD.5
;#define MOTOR_BACKWARD      PORTD.6
;
;typedef enum {S_NONE, S_OPEN, S_CLOSE} Stage;
;
;
;void StartOpen()
; 0000 0041 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0042     MOTOR_BACKWARD = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0043     ELECT_COUPLING = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0044     delay_ms(500);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0045     MOTOR_FORWARD = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0046 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void StartClose()
; 0000 0049 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004A     MOTOR_FORWARD = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004B     ELECT_COUPLING = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004C     delay_ms(500);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004D     MOTOR_BACKWARD = 1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004E }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void Stop()
; 0000 0051 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0052     ELECT_COUPLING = 0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0053     MOTOR_FORWARD = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0054     MOTOR_BACKWARD = 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0055 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#define ADC_VREF_TYPE 0x40
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 005A {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000031 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005C // Delay needed for the stabilization of the ADC input voltage
; 0000 005D delay_us(10);
;PCODE: $00000035 VOL: 0
; 0000 005E // Start the AD conversion
; 0000 005F ADCSRA|=0x40;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0060 // Wait for the AD conversion to complete
; 0000 0061 while ((ADCSRA & 0x10)==0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0062 ADCSRA|=0x10;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0063 return ADCW;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0064 }
;PCODE: $00000043 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0069 {
;PCODE: $00000044 VOL: 0
; 0000 006A unsigned int r_v = 0;
; 0000 006B Stage stage;
; 0000 006C stage = S_NONE;
;	r_v -> R16,R17
;	stage -> R19
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D 
; 0000 006E 
; 0000 006F // Input/Output Ports initialization
; 0000 0070 // Port B initialization
; 0000 0071 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0072 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=P
; 0000 0073 PORTB=0x01;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0074 DDRB=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0075 
; 0000 0076 // Port C initialization
; 0000 0077 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0078 // State6=T State5=P State4=T State3=T State2=T State1=P State0=T
; 0000 0079 PORTC=0b0100010;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007A DDRC=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007B 
; 0000 007C // Port D initialization
; 0000 007D // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 007E // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 007F PORTD=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0080 DDRD=0xFF;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 0 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: Timer 0 Stopped
; 0000 0085 TCCR0=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0086 TCNT0=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0087 
; 0000 0088 // Timer/Counter 1 initialization
; 0000 0089 // Clock source: System Clock
; 0000 008A // Clock value: Timer1 Stopped
; 0000 008B // Mode: Normal top=0xFFFF
; 0000 008C // OC1A output: Discon.
; 0000 008D // OC1B output: Discon.
; 0000 008E // Noise Canceler: Off
; 0000 008F // Input Capture on Falling Edge
; 0000 0090 // Timer1 Overflow Interrupt: Off
; 0000 0091 // Input Capture Interrupt: Off
; 0000 0092 // Compare A Match Interrupt: Off
; 0000 0093 // Compare B Match Interrupt: Off
; 0000 0094 TCCR1A=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0095 TCCR1B=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0096 TCNT1H=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0097 TCNT1L=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0098 ICR1H=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0099 ICR1L=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009A OCR1AH=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009B OCR1AL=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 009C OCR1BH=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009D OCR1BL=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 2 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: Timer2 Stopped
; 0000 00A2 // Mode: Normal top=0xFF
; 0000 00A3 // OC2 output: Disconnected
; 0000 00A4 ASSR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A5 TCCR2=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A6 TCNT2=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A7 OCR2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A8 
; 0000 00A9 // External Interrupt(s) initialization
; 0000 00AA // INT0: Off
; 0000 00AB // INT1: Off
; 0000 00AC MCUCR=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AF TIMSK=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00B0 
; 0000 00B1 // USART initialization
; 0000 00B2 // USART disabled
; 0000 00B3 UCSRB=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00B4 
; 0000 00B5 // Analog Comparator initialization
; 0000 00B6 // Analog Comparator: Off
; 0000 00B7 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B8 ACSR=0x80;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00B9 SFIOR=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00BA 
; 0000 00BB // ADC initialization
; 0000 00BC // ADC Clock frequency: 500,000 kHz
; 0000 00BD // ADC Voltage Reference: AREF pin
; 0000 00BE ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BF ADCSRA=0x81;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C0 
; 0000 00C1 // SPI initialization
; 0000 00C2 // SPI disabled
; 0000 00C3 SPCR=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C4 
; 0000 00C5 // TWI initialization
; 0000 00C6 // TWI disabled
; 0000 00C7 TWCR=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C8 
; 0000 00C9 while (1)
;PCODE: $00000087 VOL: 0
; 0000 00CA     {
; 0000 00CB         if(0 == PROG_BUTTON)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00CC         {
; 0000 00CD             //режим програмування
; 0000 00CE 			r_v = read_adc(0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CF 
; 0000 00D0             if (0 == min_sensor_value || min_sensor_value > 1024 || r_v < min_sensor_value )
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D1             {
; 0000 00D2                 min_sensor_value = r_v;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D3             }
; 0000 00D4 
; 0000 00D5             if (0 == max_sensor_value || max_sensor_value > 1024 || r_v > max_sensor_value)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D6             {
; 0000 00D7                 max_sensor_value = r_v;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00D8             }
; 0000 00D9         }
;PCODE: $000000A9 VOL: 0
; 0000 00DA         else
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00DB         {
; 0000 00DC             if (0 == min_sensor_value || min_sensor_value > 1024 || 0 == max_sensor_value || max_sensor_value > 1024)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00DD             {
; 0000 00DE                 //якщо не запрограмовано, то нічого непрацює
; 0000 00DF                 continue;
;PCODE: $000000BC VOL: 0
; 0000 00E0             }
; 0000 00E1 
; 0000 00E2 			if(1 == CLOSE_BUTTON)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00E3 			{
; 0000 00E4 				while(1 == CLOSE_BUTTON) delay_ms(10);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00E6 Stop();
;PCODE: $000000CA VOL: 0
; 0000 00E7 				StartClose();
;PCODE: $000000CB VOL: 0
; 0000 00E8 				stage = S_CLOSE;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00E9 			}
; 0000 00EA 
; 0000 00EB 			if(0 == CENTRAL_BUTTON && 1 == END_BUTTON)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00EC 			{
; 0000 00ED 				while(0 == CENTRAL_BUTTON) delay_ms(10);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00EF Stop();
;PCODE: $000000E2 VOL: 0
; 0000 00F0 				StartOpen();
;PCODE: $000000E3 VOL: 0
; 0000 00F1 				stage = S_OPEN;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F2 			}
; 0000 00F3 
; 0000 00F4 			if (S_OPEN == stage && 1 == END_BUTTON)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F5 			{
; 0000 00F6 				r_v = read_adc(0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F7 				if (r_v > max_sensor_value - max_sensor_value*ACCURACY_PER/100.0)
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00F8 				{
; 0000 00F9 					stage = S_NONE;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00FA 					Stop();
;PCODE: $00000107 VOL: 0
; 0000 00FB 				}
; 0000 00FC 			}
;PCODE: $00000108 VOL: 0
; 0000 00FD 
; 0000 00FE 			if (S_CLOSE == stage && 1 == END_BUTTON)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00FF 			{
; 0000 0100 				r_v = read_adc(0);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0101 				if (r_v < min_sensor_value)
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0102 				{
; 0000 0103 					Stop();
;PCODE: $0000011B VOL: 0
; 0000 0104 				}
; 0000 0105 			}
;PCODE: $0000011C VOL: 0
; 0000 0106 
; 0000 0107             if (0 == END_BUTTON)
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0108             {
; 0000 0109                 //значить закрився капот
; 0000 010A                 stage = S_NONE;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 010B             }
; 0000 010C 
; 0000 010D             if (S_NONE == stage && 1 == END_BUTTON) //захист від падіння
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 010E             {
; 0000 010F 				r_v = read_adc(0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0110 				if (r_v < max_sensor_value - 2*max_sensor_value*ACCURACY_PER/100.0)
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0111 				{
; 0000 0112     				Stop();
;PCODE: $00000142 VOL: 0
; 0000 0113     				StartOpen();
;PCODE: $00000143 VOL: 0
; 0000 0114     				stage = S_OPEN;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0115 				}
; 0000 0116             }
;PCODE: $00000146 VOL: 0
; 0000 0117         }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0118     }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0119 }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
